@using Ididit.Backup

<PageTitle>ididit!</PageTitle>

<HeadContent>
    @if (_bootswatchThemes.ContainsKey(Theme) && _workaround == 0)
    {
        <link rel="stylesheet" href="@($"https://cdn.jsdelivr.net/npm/bootswatch@5.1.3/dist/{Theme}/bootstrap.min.css")" integrity="@(_bootswatchThemes[Theme])" crossorigin="anonymous">
    }
    else if (_bootswatchThemes.ContainsKey(Theme) && _workaround == 1)
    {
        <link rel="stylesheet" href="@($"https://cdn.jsdelivr.net/npm/bootswatch@5.1.3/dist/{Theme}/bootstrap.min.css")" integrity="@(_bootswatchThemes[Theme])" crossorigin="anonymous">
    }
    else
    {
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    }
</HeadContent>

<CascadingValue Value=Size>

    <ErrorBoundary>
        <ChildContent>

            <Container Fluid=true Height=Height.Is100 Display=Display.Flex Flex=Flex.Column>
                <Row Border=Border.Is1.OnTop.Dark>
                    <Column Border=Border.Is1.OnBottom.Primary Display=Display.Flex>

                        @if (Screen == Screen.Main)
                        {
                            <Button Class="shadow-none sidebar-toggle-visible" Color="Color.Primary" Outline="!_sidebarVisible" Size="Size" Margin=Margin.IsAuto.FromTop.IsAuto.FromBottom.Is2.FromEnd Padding=Padding.Is0.Is1.OnX @onclick="ToggleSidebar">
                                <Icon Class="fa-fw" Name="IconName.Bars" />
                            </Button>
                        }

                        <Button Class="shadow-none" Color="Color.Primary" Outline="Screen != Screen.Options" Size="Size" Margin=Margin.IsAuto.FromTop.IsAuto.FromBottom.Is2.FromEnd Padding=Padding.Is0.Is1.OnX @onclick="ToggleOptions">
                            <Icon Class="fa-fw" Name="IconName.Wrench" />
                        </Button>

                        @if (_showDebugControls && IsDebug)
                        {
                            <Button Class="shadow-none" Color="Color.Primary" Outline="true" Size="Size" Margin=Margin.IsAuto.FromTop.IsAuto.FromBottom.Is2.FromEnd Padding=Padding.Is0.Is1.OnX @onclick="DebugTheme">
                                <Icon Class="fa-fw" Name="IconName.Bug" /> @Theme
                            </Button>

                            <Button Class="shadow-none" Color="Color.Primary" Outline="true" Size="Size" Margin=Margin.IsAuto.FromTop.IsAuto.FromBottom.Is2.FromEnd Padding=Padding.Is0.Is1.OnX @onclick="DebugBackground">
                                <Icon Class="fa-fw" Name="IconName.Bug" /> @_background.Name
                            </Button>
                        }

                        <Button Class="shadow-none" Size="Size" Margin=Margin.IsAuto.FromTop.IsAuto.FromBottom.Is2.FromEnd Padding=Padding.Is0.Is1.OnX @onclick="ShowMainScreen">
                            <Span style="font-family: 'Caveat', cursive; font-size: 1.5em;">ididit!</Span>
                        </Button>

                        @if (IsPersonalComputer)
                        {
                        <Inline Margin=Margin.IsAuto.FromStart>
                            <Addons Size=Size.Small Margin=Margin.IsAuto.FromTop.IsAuto.FromBottom Padding=Padding.Is0>
                                <Addon AddonType="AddonType.Start">
                                    <Button Color="Color.Primary" Outline="UnsavedChanges" Size="Size" @onclick="Backup">
                                        <Icon Class="fa-fw" Name="IconName.Save" />
                                    </Button>
                                </Addon>

                                @if (IsApple)
                                {
                                    <select class="form-select" value="@Settings.SelectedBackupFormat" @onchange="OnDataFormatChangeEvent">
                                        @foreach (DataFormat dataFormat in ImportExport.DataExportByFormat.Keys)
                                        {
                                            <option value="@dataFormat">@Localizer[dataFormat.GetDescription()]</option>
                                        }
                                    </select>
                                }
                                else
                                {
                                    <Select TValue="DataFormat" Size="Size.Small" SelectedValue="Settings.SelectedBackupFormat" SelectedValueChanged="OnDataFormatChanged">
                                        @foreach (DataFormat dataFormat in ImportExport.DataExportByFormat.Keys)
                                        {
                                            <SelectItem Value="dataFormat">@Localizer[dataFormat.GetDescription()]</SelectItem>
                                        }
                                    </Select>
                                }
                            </Addons>
                        </Inline>
                        }

                        @*@UserDisplayName.GetUserDisplayName().Result*@

                    </Column>
                </Row>
                @if (Screen == Screen.Options)
                {
                    <Row Background=_background Flex=Flex.Grow.Is1 Overflow=Overflow.Auto Display=Display.Block Height=Height.Max100>

                        <Div Display=Display.Flex>
                            <h4 class="d-inline-block">@Localizer["Options"]</h4>
                            <Button Class="shadow-none" Margin=Margin.Is0.OnY.IsAuto.FromStart Padding=Padding.Is0 @onclick="ShowMainScreen">
                                <Icon Class="fa-fw" Name="IconName.Times" />
                            </Button>
                        </Div>

                        @if (Ididit.Backup.Online.GoogleDriveBase.IsGoogleDriveAvailable)
                        {
                            <Card Margin=Margin.Is0.OnMobile.Is2.OnDesktop Padding=Padding.Is0 Style="max-width: 414px">
                                <CardBody Padding=Padding.Is1>
                                    <ErrorBoundary>
                                        <ChildContent>
                                            @ChildContent
                                        </ChildContent>
                                        <ErrorContent Context="ex">
                                            <p>@ex.Message</p>
                                        </ErrorContent>
                                    </ErrorBoundary>
                                </CardBody>
                            </Card>
                        }

                        <OptionsComponent @bind-SelectedCategory=_selectedCategory 
                            Size="Size" SizeChanged="OnSizeChanged" 
                            Themes="_bootswatchThemes.Keys" Theme="@Theme" ThemeChanged="OnThemeChanged"
                            Backgrounds="_backgrounds.Keys" Background="@Repository.Settings.Background" BackgroundChanged="OnBackgroundChanged"
                            LanguageChanged="() => StateHasChanged()" />

                        @if (IsDebug)
                        {
                            <Card Margin=Margin.Is0.OnMobile.Is2.OnDesktop Padding=Padding.Is0 Style="max-width: 414px">
                                <CardBody Padding=Padding.Is1>

                                    <Check TValue="bool" Checked="_showDebugControls" CheckedChanged="OnShowDebugChanged">@Localizer["Show debug controls"]</Check>

                                </CardBody>
                            </Card>
                        }

                    </Row>
                }
                else if (Screen == Screen.Help)
                {
                    <Row Background=_background Flex=Flex.Grow.Is1 Overflow=Overflow.Auto Display=Display.Block Height=Height.Max100>
                        <Column>
                            <HelpComponent />
                        </Column>
                    </Row>
                }
                else if (Screen == Screen.About)
                {
                    <Row Background=_background Flex=Flex.Grow.Is1 Overflow=Overflow.Auto Display=Display.Block Height=Height.Max100>
                        <Column>
                            <AboutComponent />
                        </Column>
                    </Row>
                }
                else
                {
                    <Row Background=_background Flex=Flex.Grow.Is1 class="parent-row">

                        <Column ColumnSize=ColumnSize.Is12.OnMobile.Is3.OnDesktop Padding=Padding.Is0 class="@($"child-column {SidebarVisibilityCss}")" style="min-width: 320px">

                            <Accordion Margin=Margin.Is0.OnMobile.Is2.OnDesktop>
                                <Collapse Visible="@_filtersVisible">
                                    <CollapseHeader Padding=Padding.Is0>
                                        <Button Size=Size.Small Block=true Padding=Padding.Is1.OnY.Is2.OnX @onclick="@(() => _filtersVisible = !_filtersVisible)">@Localizer["Search, filter, sort"]</Button>
                                    </CollapseHeader>
                                    <CollapseBody Padding=Padding.Is0>
                                        <FiltersComponent @bind-Filters="_filters" Settings=Settings />
                                    </CollapseBody>
                                </Collapse>
                                <Collapse Visible="@_categoriesVisible">
                                    <CollapseHeader Padding=Padding.Is0>
                                        <Button Size=Size.Small Block=true Padding=Padding.Is1.OnY.Is2.OnX @onclick="@(() => _categoriesVisible = !_categoriesVisible)">@Localizer["Tasks"]</Button>
                                    </CollapseHeader>
                                    <CollapseBody Padding=Padding.Is0>
                                        <CategoriesComponent @bind-SelectedCategory=_selectedCategory Settings=Settings />
                                    </CollapseBody>
                                </Collapse>
                            </Accordion>

                        </Column>

                        <Column Padding=Padding.Is0.OnMobile.Is2.OnDesktop>
                            <Div Display="Display.Flex" Flex="Flex.Column" Height="Height.Is100">
                                <Button Disabled="string.IsNullOrEmpty(_selectedAdvancedEditText)" Color=Color.Primary Size="Size" Block=true Margin="Margin.Is2.FromBottom">@Localizer["Move selected text to selected goal"]</Button>
                                <Check TValue="bool" @bind-Checked="_selectLineWithCaret">@Localizer["Select line with caret"]</Check>
                                <Check TValue="bool" @bind-Checked="_filterBySelectedText">@Localizer["Filter by selected text"]</Check>
                                <MemoEdit @ref="_advancedEdit" Class="shadow-none" Style="resize:none" Margin="Margin.Is2.FromTop" Flex="Flex.Grow.Is1" @bind-Text="@_advancedEditText" @onselect="OnSelect" @onkeyup="OnKeyUp" @onmouseup="OnMouseUp" FocusOut=OnFocusOut />
                            </Div>
                        </Column>

                        <Column Padding=Padding.Is0 class="child-column">
                            <GoalsComponent @bind-SelectedCategory=_selectedCategory @bind-EditDetailsGoal=_editDetailsGoal @bind-EditNameGoal=_editNameGoal Filters=_filters Settings=Settings />
                        </Column>

                    </Row>
                }
                <Row>
                    <Column Display=Display.Flex Border=Border.Is1.OnTop.Primary>

                        <Button Class="shadow-none" Color="Color.Primary" Outline="Screen != Screen.Help" Size="Size" Margin=Margin.Is1.OnY Padding=Padding.Is0.Is1.OnX @onclick="ToggleHelp">
                            <Icon Class="fa-fw" Name="IconName.QuestionCircle" />
                        </Button>

                        <Button Class="shadow-none" Color="Color.Primary" Outline="Screen != Screen.About" Size="Size" Margin=Margin.Is1.OnY.IsAuto.FromStart Padding=Padding.Is0.Is1.OnX @onclick="ToggleAbout">
                            <Icon Class="fa-fw" Name="IconName.InfoCircle" />
                        </Button>

                    </Column>
                </Row>
            </Container>

        </ChildContent>
        <ErrorContent Context="ex">
            <p>@ex.Message</p>
        </ErrorContent>
    </ErrorBoundary>

</CascadingValue>